import { generateMasterSeed, deriveHkdfKey } from '../utils/signature/keyUtils.js';
import { signMessage } from '../utils/signature/signMessage.js';
import { hashMessage } from '../utils/signature/hashMessage.js';
import { logError } from '../setting/logger.js';

/**
 * Signs a message with two keys: the main key and an HKDF-derived key.
 *
 * Both keys are derived from masterSeed using HKDF, but with different info strings.
 *
 * @param {Object} message - The message object to be signed.
 * @param {string} mnemonic - The mnemonic phrase used to generate the master seed.
 * @param {string} alphanumericPart - The alphanumeric string used as info for HKDF derivation.
 * @returns {{
 *   originalMessage: Object,
 *   hash: string,
 *   signatures: Array<{
 *     type: string,
 *     r: string,
 *     s: string,
 *     pub: string,
 *     der: string,
 *     signatureCompact: string
 *   }>
 * }} - Returns the original message, its hash, and the signatures generated by both keys.
 */
export function signWithBothKeys(message, mnemonic, alphanumericPart) {
  try {
    const seed = generateMasterSeed(mnemonic);

    const hash = hashMessage(message);

    const mainKeyInfo = Buffer.from(`mainKey-${alphanumericPart}`);
    const hkdfKeyInfo = Buffer.from(`hkdfKey-${alphanumericPart}`);

    const mainPrivateKey = deriveHkdfKey(seed, mainKeyInfo);
    const hkdfPrivateKey = deriveHkdfKey(seed, hkdfKeyInfo);

    const mainSignature = signMessage(mainPrivateKey, message);
    const hkdfSignature = signMessage(hkdfPrivateKey, message);

    return {
      originalMessage: message,
      hash,
      signatures: [
        { type: 'main', ...mainSignature },
        { type: 'hkdf', ...hkdfSignature },
      ],
    };
  } catch (error) {
    logError(error, 'signWithBothKeys');
    throw error;
  }
}
